from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from monitor.logger import log
from monitor.settings import load_config, save_config, parse_human_number, human_readable_number

def update_config(key, value):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –≤ —Ñ–∞–π–ª."""
    config = load_config()
    config[key] = value
    save_config(config)
    log(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {key} = {value}", level="info")
    return config

async def start(update: Update, context):
    config = load_config()
    buttons = [
        [KeyboardButton("üì¥ –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞"), KeyboardButton("üì° –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞")],
        [KeyboardButton("üìä –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º"), KeyboardButton("üìà –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã")],
        [KeyboardButton("üíπ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –æ–±—ä—ë–º–∞"), KeyboardButton("üõ†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")],
        [KeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"), KeyboardButton("üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏")],
        [KeyboardButton("üìè –ú–∏–Ω. –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")]
    ]
    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    required_count = len(config.get('required_indicators', []))
    min_ind = config.get('min_indicators', 1)
    await update.message.reply_text(
        f"üöÄ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: {config['bot_status']}\n"
        f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {config['timeframe']}\n"
        f"–ü–æ—Ä–æ–≥ —Ü–µ–Ω—ã: {config['price_change_threshold']}%\n"
        f"–§–∏–ª—å—Ç—Ä –æ–±—ä—ë–º–∞: {human_readable_number(config['volume_filter'])} USDT\n"
        f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {sum(config['indicators_enabled'].values())}/{len(config['indicators_enabled'])} –≤–∫–ª—é—á–µ–Ω–æ\n"
        f"–ú–∏–Ω. –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {min_ind}\n"
        f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ: {required_count}/{len(config['indicators_enabled'])}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def test_telegram(update: Update, context):
    await update.message.reply_text("‚úÖ –¢–µ—Å—Ç: –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def indicators(update: Update, context):
    config = load_config()
    keyboard = []
    for ind, enabled in config['indicators_enabled'].items():
        status = "‚úÖ" if enabled else "‚ùå"
        keyboard.append([InlineKeyboardButton(f"{status} {ind}", callback_data=f"toggle_{ind}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=reply_markup)

async def required_indicators(update: Update, context):
    config = load_config()
    keyboard = []
    for ind in config['indicators_enabled']:
        status = "üîë" if ind in config['required_indicators'] else ""
        keyboard.append([InlineKeyboardButton(f"{status} {ind}", callback_data=f"required_{ind}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=reply_markup)

async def toggle_indicator(update: Update, context):
    query = update.callback_query
    data = query.data
    config = load_config()
    if data.startswith("toggle_"):
        ind = data.replace("toggle_", "")
        config['indicators_enabled'][ind] = not config['indicators_enabled'].get(ind, False)
        save_config(config)
        await query.answer(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä {ind} {'–≤–∫–ª—é—á—ë–Ω' if config['indicators_enabled'][ind] else '–≤—ã–∫–ª—é—á–µ–Ω'}")
    elif data.startswith("required_"):
        ind = data.replace("required_", "")
        required = config['required_indicators']
        if ind in required:
            required.remove(ind)
        else:
            required.append(ind)
        save_config(config)
        await query.answer(f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä {ind} {'—Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' if ind in required else '–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}")
    await query.edit_message_text(text="–û–±–Ω–æ–≤–ª–µ–Ω–æ!")

async def handle_message(update: Update, context):
    text = update.message.text
    if 'awaiting' in context.user_data:
        key = context.user_data['awaiting']
        try:
            if key == 'timeframe':
                if text not in ['1m', '5m', '15m', '1h']:
                    raise ValueError("–¢–∞–π–º—Ñ—Ä–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1m, 5m, 15m –∏–ª–∏ 1h")
                update_config('timeframe', text)
            elif key == 'volume_filter':
                value = parse_human_number(text)
                update_config('volume_filter', value)
            elif key == 'price_change_threshold':
                value = float(text)
                if value < 0:
                    raise ValueError("–ü–æ—Ä–æ–≥ —Ü–µ–Ω—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                update_config('price_change_threshold', value)
            elif key == 'min_indicators':
                value = int(text)
                if value < 1:
                    raise ValueError("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 1")
                update_config('min_indicators', value)
            await update.message.reply_text(f"{key} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {text}")
            context.user_data.pop('awaiting')
        except ValueError as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")
        return

    if text == "üì¥ –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞":
        update_config('bot_status', False)
        await update.message.reply_text("üì¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω")
    elif text == "üì° –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞":
        update_config('bot_status', True)
        await update.message.reply_text("üì° –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω")
    elif text == "üõ†Ô∏è –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        default_config = {
            'timeframe': '1m',
            'volume_filter': 5000000.0,
            'price_change_threshold': 0.5,
            'bot_status': True,
            'indicators_enabled': {
                "price_change": True,
                "rsi": True,
                "macd": True,
                "volume_surge": True,
                "bollinger": True,
                "adx": True,
                "rsi_macd_divergence": True,
                "candle_patterns": True,
                "volume_pre_surge": True,
                "ema_crossover": True,
                "obv": True
            },
            'min_indicators': 1,
            'required_indicators': []
        }
        save_config(default_config)
        await update.message.reply_text("üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")
    elif text == "üìä –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞–π–º—Ñ—Ä–µ–π–º":
        context.user_data['awaiting'] = 'timeframe'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º (1m, 5m, 15m, 1h):")
    elif text == "üíπ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –æ–±—ä—ë–º–∞":
        context.user_data['awaiting'] = 'volume_filter'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5M, 100K):")
    elif text == "üìà –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ —Ü–µ–Ω—ã":
        context.user_data['awaiting'] = 'price_change_threshold'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ % (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5):")
    elif text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏":
        await indicators(update, context)
    elif text == "üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏":
        await required_indicators(update, context)
    elif text == "üìè –ú–∏–Ω. –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤":
        context.user_data['awaiting'] = 'min_indicators'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –æ—Ç 1):")
