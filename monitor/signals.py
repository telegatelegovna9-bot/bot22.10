# signals.py (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∫–æ–¥)
import telegram
from monitor.logger import log
from monitor.charts import create_chart

async def send_signal(symbol, df, info, config):
    try:
        log(f"–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}")
        bot = telegram.Bot(token=config['telegram_token'])
        last_close = float(df['close'].iloc[-1])
        prev_close = float(df['close'].iloc[-2])
        tf_change = (last_close - prev_close) / prev_close * 100 if prev_close != 0 else 0

        signal_type = info.get("type", "")
        count_triggered = info.get("count_triggered", 0)
        total_indicators = info.get("total_indicators", 0)
        count_str = f"–°—Ä–∞–±–æ—Ç–∞–ª–æ {count_triggered} –∏–∑ {total_indicators} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"

        if signal_type == "pump":
            icon, label = "üöÄ", "–ü–ê–ú–ü"
        elif signal_type == "dump":
            icon, label = "üìâ", "–î–ê–ú–ü"
        else:
            icon, label = "‚ö™", "–°–ò–ì–ù–ê–õ"

        tradingview_url = f"https://www.tradingview.com/chart/?symbol=BYBIT:{symbol.replace('/', '').replace(':', '')}.P"

        html = (
            f"<b>{icon} {label}</b> | <b>{tf_change:.2f}% –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–∏–≥–Ω–∞–ª–∞</b>\n"
            f"–ú–æ–Ω–µ—Ç–∞: <code>{symbol}</code>\n"
            f"–¶–µ–Ω–∞ —Å–µ–π—á–∞—Å: <b>{last_close:.6f} USDT</b>\n"
            f"{count_str}\n"
            f"\n–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ):\n"
        )
        if "rsi" in info:
            html += f"‚Ä¢ RSI: <b>{info['rsi']:.1f}</b> (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)\n"
        if "macd" in info:
            html += f"‚Ä¢ MACD: <b>{info['macd']:.6f}</b> (—Ç—Ä–µ–Ω–¥)\n"
        if "volume_surge" in info:
            html += f"‚Ä¢ –†–æ—Å—Ç –æ–±—ä—ë–º–∞: <b>x{info['volume_surge']:.2f}</b>\n"
        if "bollinger" in info:
            html += f"‚Ä¢ Bollinger: <b>{'–≤—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π' if info['bollinger'] == 'upper' else '–Ω–∏–∂–µ –Ω–∏–∂–Ω–µ–π' if info['bollinger'] == 'lower' else '–≤–Ω—É—Ç—Ä–∏'}</b>\n"
        if "adx" in info:
            html += f"‚Ä¢ ADX: <b>{info['adx']:.1f}</b> (—Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞)\n"
        if "rsi_macd_divergence" in info:
            html += f"‚Ä¢ –î–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è: <b>{'–±—ã—á—å—è' if info['rsi_macd_divergence'] == 'bullish' else '–º–µ–¥–≤–µ–∂—å—è' if info['rsi_macd_divergence'] == 'bearish' else '–Ω–µ—Ç'}</b>\n"
        if "bullish_candle" in info or "bearish_candle" in info:
            candle = "Hammer" if info['bullish_candle'] else "Shooting Star" if info['bearish_candle'] else "–Ω–µ—Ç"
            html += f"‚Ä¢ –°–≤–µ—á–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω: <b>{candle}</b>\n"
        if "volume_pre_surge" in info:
            html += f"‚Ä¢ –†–æ—Å—Ç –æ–±—ä—ë–º–∞: <b>{'–¥–∞' if info['volume_pre_surge'] else '–Ω–µ—Ç'}</b> (20-50%)\n"
        if "ema_cross_up" in info or "ema_cross_down" in info:
            ema_cross = "–±—ã—á–∏–π" if info['ema_cross_up'] else "–º–µ–¥–≤–µ–∂–∏–π" if info['ema_cross_down'] else "–Ω–µ—Ç"
            html += f"‚Ä¢ EMA Crossover: <b>{ema_cross}</b> (EMA12/EMA26)\n"
        if "obv_trend" in info:
            obv = "—Ä–∞—Å—Ç—ë—Ç" if info['obv_trend'] > 0 else "–ø–∞–¥–∞–µ—Ç" if info['obv_trend'] < 0 else "—Å—Ç–∞–±–∏–ª–µ–Ω"
            html += f"‚Ä¢ OBV: <b>{obv}</b> (–æ–±—ä—ë–º–Ω—ã–π —Ç—Ä–µ–Ω–¥)\n"
        html += (
            f"\n{info['comment']}\n\n"
            f"<a href=\"{tradingview_url}\">–û—Ç–∫—Ä—ã—Ç—å –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ TradingView</a>"
        )

        chart_buf = create_chart(df, symbol, config['timeframe'])
        log(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {config['chat_id']}...")
        if chart_buf is None:
            log(f"–ì—Ä–∞—Ñ–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω –¥–ª—è {symbol}", level="warning")
            await bot.send_message(chat_id=config['chat_id'], text=html + "\n(–ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)", parse_mode="HTML")
        else:
            await bot.send_photo(chat_id=config['chat_id'], photo=chart_buf, caption=html, parse_mode="HTML")
        log(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {symbol}")
        log(f"[{symbol}] –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {label} | {tf_change:.2f}% | {last_close}. –î–µ—Ç–∞–ª–∏: {info['debug']}")
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}: {e}")
        raise
