# bot.py (corrected version)
import asyncio
import sys
import traceback
import telegram
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz
from monitor.fetcher import get_all_futures_tickers, fetch_ohlcv_bybit
from monitor.analyzer import analyze
from monitor.logger import log
from monitor.settings import load_config
from monitor.signals import send_signal
from monitor.handlers import start, test_telegram, handle_message, toggle_indicator

if sys.platform.startswith("win"):
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

config = load_config()
scheduler = AsyncIOScheduler(timezone=pytz.UTC)
semaphore = asyncio.Semaphore(25)

EXCLUDED_KEYWORDS = ["ALPHA", "WEB3", "AI", "BOT"]

previous_signals = {}  # –ö—ç—à: {symbol: count_triggered}
cached_tickers = {}  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤

async def run_monitor():
    global config, cached_tickers
    config = load_config()
    if not config.get('bot_status', False):
        log("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ –∫–æ–Ω—Ñ–∏–≥—É.", level="warning")
        return

    try:
        log("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        start_time = asyncio.get_event_loop().time()
        if not cached_tickers or cached_tickers.get('timestamp', 0) + 300 < asyncio.get_event_loop().time():
            tickers = await get_all_futures_tickers()
            tickers = [t for t in tickers if not any(k in t.upper() for k in EXCLUDED_KEYWORDS)]
            cached_tickers = {'tickers': tickers, 'timestamp': asyncio.get_event_loop().time()}
            log(f"–ü–æ–ª—É—á–µ–Ω–æ {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–æ–±–Ω–æ–≤–ª—ë–Ω –∫—ç—à)", level="info")
        else:
            tickers = cached_tickers['tickers']
            log(f"–ü–æ–ª—É—á–µ–Ω–æ {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –∫—ç—à–∞", level="info")
        log(f"–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞: {len(tickers)}")

        if not tickers:
            log("–¢–∏–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", level="warning")
            return

        total, signals = 0, 0

        async def process_symbol(symbol):
            nonlocal total, signals
            async with semaphore:
                await asyncio.sleep(0.1)
                symbol_start_time = asyncio.get_event_loop().time()
                try:
                    log(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}", level="info")
                    df = await fetch_ohlcv_bybit(symbol, config['timeframe'])
                    if df.empty:
                        log(f"{symbol} - –ø—É—Å—Ç–æ–π DataFrame –ø–æ—Å–ª–µ fetch_ohlcv_bybit", level="warning")
                        return
                    is_signal, info = analyze(df, config, symbol=symbol)
                    total += 1
                    if is_signal:
                        signals += 1
                        count_triggered = info.get('count_triggered', 0)
                        prev_count = previous_signals.get(symbol, 0)
                        if symbol not in previous_signals or count_triggered > prev_count:
                            log(f"–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è {symbol}", level="info")
                            await send_signal(symbol, df, info, config)
                            previous_signals[symbol] = count_triggered
                        else:
                            await send_confirmation(symbol, info, config, count_triggered, prev_count)
                    else:
                        log(f"[{symbol}] –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞. {info.get('debug', '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')}", level="info")
                    symbol_end_time = asyncio.get_event_loop().time()
                    log(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {symbol} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {symbol_end_time - symbol_start_time:.2f} —Å–µ–∫", level="debug")
                except Exception as e:
                    log(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {str(e)}", level="error")

        tasks = [process_symbol(symbol) for symbol in tickers]
        await asyncio.gather(*tasks)
        end_time = asyncio.get_event_loop().time()
        log(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total} —Ç–∏–∫–µ—Ä–æ–≤, —Å–∏–≥–Ω–∞–ª–æ–≤: {signals}, –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {end_time - start_time:.2f} —Å–µ–∫", level="info")
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –≤ run_monitor: {str(e)} | Traceback: {traceback.format_exc()}", level="error")

async def send_confirmation(symbol, info, config, count_triggered, prev_count):
    try:
        bot = telegram.Bot(token=config['telegram_token'])
        signal_type = info.get("type", "")
        if signal_type == "pump":
            icon, label = "üöÄ", "–ü–ê–ú–ü"
        elif signal_type == "dump":
            icon, label = "üìâ", "–î–ê–ú–ü"
        else:
            icon, label = "‚ö™", "–°–ò–ì–ù–ê–õ"

        html = (
            f"<b>{icon} –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ {label.lower()}</b>\n"
            f"–ú–æ–Ω–µ—Ç–∞: <code>{symbol}</code>\n"
            f"–¢–µ–ø–µ—Ä—å —Å—Ä–∞–±–æ—Ç–∞–ª–æ {count_triggered} –∏–∑ {info['total_indicators']} –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (—Ä–∞–Ω–µ–µ {prev_count})\n"
            f"{info['comment']}"
        )

        await bot.send_message(chat_id=config['chat_id'], text=html, parse_mode="HTML")
        log(f"[{symbol}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {label}, —Å—Ä–∞–±–æ—Ç–∞–ª–æ {count_triggered}")
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è {symbol}: {e}")

async def reload_bot(app):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫"""
    global config
    log("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞...")
    scheduler.remove_all_jobs()
    await app.stop()
    await app.start()
    config = load_config()
    log("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")

async def main():
    app = ApplicationBuilder().token(config['telegram_token']).build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('test', test_telegram))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(toggle_indicator))

    scheduler.add_job(run_monitor, 'interval', seconds=60)
    scheduler.start()
    log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start –∏–ª–∏ /test –≤ Telegram.")

    await app.initialize()
    await app.start()
    await app.updater.start_polling(allowed_updates=['message', 'callback_query'])
    await asyncio.Event().wait()  # Keep the loop running

if __name__ == '__main__':
    asyncio.run(main())
